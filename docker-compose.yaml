version: '3.9'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - kafka-network

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ADVERTISED_LISTENERS=INSIDE://kafka:29092,OUTSIDE://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      - KAFKA_LISTENERS=INSIDE://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=INSIDE
      - KAFKA_ADVERTISED_HOST_NAME=localhost
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS=recentChange:1:1,output:1:1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - "zookeeper"
    networks:
      - kafka-network

  producer:
    build: producer/
    environment:
      - BOOTSTRAP_SERVER=kafka:29092
      - PYTHONUNBUFFERED=1
    depends_on:
      - "kafka"
    networks:
      - kafka-network

  server:
    build: server/
    ports:
      - "8000:8000"
    environment:
      - BOOTSTRAP_SERVER=kafka:29092
      - PYTHONUNBUFFERED=1
    depends_on:
      - "kafka"
    networks:
      - kafka-network

  streamworker:
    build: StreamWorker/
    environment:
      - BOOTSTRAP_SERVER=kafka:29092
    depends_on:
      - "kafka"
    networks:
      - kafka-network

  client:
    build:
      context: DataViewer/client
      args: 
        - BOOTSTRAP_SERVER=http://server:8000/stream
    ports:
      - "3000:3000"
    depends_on:
      - "server"
    networks:
      - kafka-network


networks:
  kafka-network:
    driver: bridge


# cd to the directory where the script is located
# pull images: docker-compose pull
# run: docker-compose up -d
# stop: docker-compose rm -s
